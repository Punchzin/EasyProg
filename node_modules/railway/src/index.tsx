import chalk from "chalk";
import fs from "fs";
import getPort from "get-port";
import { render } from "ink";
import meow from "meow";
import React from "react";
import checkForUpdate, { Result as UpdateResult } from "update-check";
import * as packageJson from "../package.json";
import { Build } from "./components/Build";
import { Env } from "./components/Env";
import { Existing } from "./components/Existing";
import { Init } from "./components/Init";
import { List } from "./components/List";
import { Login } from "./components/Login";
import { Logout } from "./components/Logout";
import { New } from "./components/New";
import { Open } from "./components/Open";
import { Status } from "./components/Status";
import { Up } from "./components/Up";
import { UpgradePackage } from "./components/UpgradePackage";
import { Use } from "./components/Use";
import { Whoami } from "./components/Whoami";
import { configExists } from "./config";
import { run } from "./run";
import { Option, Task, TaskCmd } from "./types";

const tasks: Task[] = [
  {
    cmd: "run",
    title: "run <cmd>",
    description: "Run command using Railway environment",
  },
  {
    cmd: "build",
    title: "build",
    description: "Generate env file for running Railway in production",
  },
  {
    cmd: "status",
    description: "View status of project",
  },
  {
    cmd: "init",
    description: "Get started with Railway",
  },
  {
    cmd: "use",
    description: "Select an environment to use",
  },
  {
    cmd: "open",
    description: "Open project in browser",
  },
  {
    cmd: "new",
    description: "Create a new project",
  },
  {
    cmd: "list",
    description: "Show all of your projects",
  },
  {
    cmd: "login",
    description: "Login to Railway",
  },
  {
    cmd: "logout",
    description: "Logout of Railway",
  },
  {
    cmd: "whoami",
    description: "Show the currently logged in user",
  },
  {
    cmd: "env",
    description: "Show Railway environment",
  },
  {
    cmd: "up",
    description: "Instantly deploy a cloud environment",
  },
];

const options: Option[] = [
  {
    long: "help",
    description: "Show the usage information",
  },
  {
    long: "version",
    alias: "v",
    description: "Show the version number",
  },
  {
    long: "force",
    alias: "f",
    description: "Overwrite existing project if it exists",
  },
];

const padding = 18;

const taskHelp = (task: Task): string =>
  `    ${(task.title || task.cmd).padEnd(padding, " ")}${task.description}`;

const optionHelp = (opt: Option): string => {
  const left = `${opt.alias != null ? `-${opt.alias}, ` : ""}--${opt.long}`;
  return `    ${left.padEnd(padding, " ")}${opt.description}`;
};

const helpMessage = () => `
  ${chalk.dim("Usage")}

    railway <command> [options]

  ${chalk.dim("Commands")}

${tasks.map(taskHelp).join("\n")}

  ${chalk.dim("Options")}

${options.map(optionHelp).join("\n")}
`;

const cli = meow(helpMessage(), {
  autoVersion: true,
  description: "ðŸš‚ Railway. Infrastructure, Instantly.",
  flags: {
    force: {
      type: "boolean",
      alias: "f",
    },
  },
});

// Catch unhandled rejections
process.on("unhandledRejection", () => {
  process.exit();
});

// Catch uncaught exceptions
process.on("uncaughtException", error => {
  fs.writeSync(1, `${error}\n\n`);
});

// End process on ctrl+c or ESC
process.stdin.on("data", key => {
  if (["\u0003", "\u001B"].includes(key as any)) {
    process.exit();
  }
});

if (cli.input.length === 0) {
  cli.showHelp();
  process.exit(0);
}

const command = cli.input[0];
const args = cli.input.slice(1);

const task = tasks.find(t => t.cmd === command);

if (task == null) {
  console.log(`\n  Command \`${command}\` not recognized.`);
  cli.showHelp();
  process.exit(1);
}

const executeTask = async (
  taskCmd: TaskCmd,
  updateResult?: UpdateResult | null,
) => {
  if (updateResult != null) {
    await render(
      <UpgradePackage updateResult={updateResult} />,
    ).waitUntilExit();
  }

  if (taskCmd === "init") {
    if (!cli.flags.force && configExists()) {
      console.log(chalk.green(".railway/config.json already exists"));
      process.exit(0);
    }

    let newCmd: TaskCmd | null =
      args.length !== 0 ? ("existing" as TaskCmd) : null;

    if (newCmd == null) {
      const { waitUntilExit, unmount } = render(
        <Init
          onInit={result => {
            newCmd = result as TaskCmd;
            unmount();
          }}
        />,
      );

      await waitUntilExit();
    }

    await executeTask(newCmd as TaskCmd);
  } else if (taskCmd === "env") {
    await render(<Env />).waitUntilExit();
  } else if (taskCmd === "new") {
    if (!cli.flags.force && configExists()) {
      console.log(chalk.green(".railway/config.json already exists"));
      process.exit(0);
    }

    await render(<New force={cli.flags.force} />).waitUntilExit();
    await executeTask("open");
  } else if (taskCmd === "existing") {
    await render(
      <Existing projectId={args[0]} force={cli.flags.force} />,
    ).waitUntilExit();
  } else if (taskCmd === "open") {
    await render(<Open />).waitUntilExit();
  } else if (taskCmd === "login") {
    const port = await getPort();
    await render(<Login port={port} />).waitUntilExit();
  } else if (taskCmd === "logout") {
    await render(<Logout />).waitUntilExit();
  } else if (taskCmd === "whoami") {
    await render(<Whoami />).waitUntilExit();
  } else if (taskCmd === "list") {
    await render(<List />).waitUntilExit();
  } else if (taskCmd === "status") {
    await render(<Status />).waitUntilExit();
  } else if (taskCmd === "build") {
    await render(<Build />).waitUntilExit();
  } else if (taskCmd === "up") {
    await render(<Up />).waitUntilExit();
  } else if (taskCmd === "use") {
    await render(<Use />).waitUntilExit();
  }
};

const go = async () => {
  let update: UpdateResult | null = null;
  try {
    update = await checkForUpdate(packageJson);
  } catch (e) {
    // do nothing
  }

  if (task.cmd === "run") {
    if (update != null) {
      await render(<UpgradePackage updateResult={update} />).waitUntilExit();
    }

    run(args);
  } else {
    await executeTask(task.cmd, update);
    process.exit();
  }
};

// go();

console.log("This version of the CLI has been deprecated.");
console.log("Install the Railway CLI from @railway/cli");
console.log("View the docs for more information: https://railway.app/docs");
process.exit(1);
