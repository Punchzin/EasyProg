export interface GlobalConfig {
    token?: string;
}
export interface Config {
    project?: string;
    environment?: string;
}
export interface Envs {
    [name: string]: string;
}
export declare type TaskCmd = "init" | "open" | "run" | "build" | "new" | "env" | "existing" | "list" | "status" | "login" | "logout" | "whoami" | "up" | "use";
export interface Task {
    cmd: TaskCmd;
    title?: string;
    description: string;
    hideInHelp?: boolean;
}
export interface Option {
    long: string;
    alias?: string;
    description: string;
}
export interface Project {
    id: string;
    name?: string;
    plugins: Plugin[];
    environments: Environment[];
}
export interface Environment {
    id: string;
    name: string;
}
export interface Plugin {
    id: string;
    name: string;
}
export interface Auth {
    token: string;
}
export interface User {
    email: string;
    name?: string;
    projects?: Project[];
}
export declare type LoadingValue<T> = {
    type: "loading";
    loading: true;
    data: null;
    error: null;
} | {
    type: "error";
    loading: false;
    data: null;
    error: string;
} | {
    type: "data";
    loading: false;
    data: T;
    error: null;
};
export declare const loadingValue: <T>() => LoadingValue<T>;
export declare const errorValue: <T>(error: string) => LoadingValue<T>;
export declare const dataValue: <T>(data: T) => LoadingValue<T>;
