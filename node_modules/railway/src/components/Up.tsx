import fs from "fs";
import { Box, Text } from "ink";
import Link from "ink-link";
import React from "react";
import tar from "tar";
import { deployDirectory } from "../api";
import { getConfig } from "../config";
import { useAsyncAction } from "../hooks/useAsyncAction";
import { useExitDelay } from "../hooks/useExitDelay";
import { Spinner } from "./Spinner";

export const Up: React.FC = () => {
  const exit = useExitDelay();

  const result = useAsyncAction<{ url: string }>(
    async () => {
      const config = getConfig();

      // Get Project
      if (config.project == null) {
        throw new Error("`project` required in .railway/config.json");
      }

      // create out directory
      if (!fs.existsSync("./out")) {
        fs.mkdirSync("./out");
      }

      console.log("Bundling...");

      // export everything to directory
      await tar.c(
        {
          gzip: true,
          file: "out/railway-up.tgz",
          filter: path =>
            !(path.includes("node_modules") || path.includes("out")),
        },
        ["./"],
      );

      console.log("Provisioning...");

      const url = await deployDirectory(
        config.project,
        fs.createReadStream("./out/railway-up.tgz"),
      );
      // cleanup the out directory
      fs.rmdirSync("./out", { recursive: true });
      return { url };
    },
    exit,
    [],
  );

  return (
    <Box>
      {result.loading ? (
        <Box>
          <Spinner />
        </Box>
      ) : result.error != null ? (
        <Text>{result.error}</Text>
      ) : (
        <Box>
          <Text>
            Available at{" "}
            <Text color="green">
              <Link>{result.data.url}</Link>
            </Text>
          </Text>
        </Box>
      )}
    </Box>
  );
};
