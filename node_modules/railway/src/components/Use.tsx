import { Box, Text } from "ink";
import SelectInput from "ink-select-input";
import React, { useState } from "react";
import { getProject } from "../api";
import { getConfig, useEnvironment } from "../config";
import { useAsyncAction } from "../hooks/useAsyncAction";
import { useExitDelay } from "../hooks/useExitDelay";
import { Environment } from "../types";
import { Spinner } from "./Spinner";

export interface Item {
  label: string;
  value: string;
}

export const Use: React.FC<{
  force?: boolean;
}> = () => {
  const [usingEnv, setUsingEnv] = useState<Environment | null>(null);
  const exit = useExitDelay();

  const environments = useAsyncAction<Environment[]>(
    async () => {
      const config = getConfig();

      if (config.project == null) {
        throw new Error(
          "No railway project. Run `railway init` to get started",
        );
      }

      const project = await getProject(config.project);
      return project.environments ?? [];
    },
    null,
    [],
  );

  const onSelectEnv = async (envId: string) => {
    if (environments.data == null) {
      exit();
      return;
    }

    const environment = environments.data.find(env => env.id === envId);

    if (environment == null) {
      throw new Error("Environment not found");
    }

    useEnvironment(envId);
    setUsingEnv(environment);
    exit();
  };

  return (
    <Box flexDirection="column">
      {usingEnv != null ? (
        <Text>
          Using environment <Text color="blue">{usingEnv.name}</Text>
        </Text>
      ) : (
        <>
          {environments.loading ? (
            <Spinner />
          ) : environments.error != null ? (
            <Text color="red">Error fetching environment</Text>
          ) : environments.data.length === 0 ? (
            <Box flexDirection="column">
              <Text>The project has no environment</Text>
            </Box>
          ) : (
            <Box paddingX={1} flexDirection="column">
              <Text>Select Environment</Text>

              <SelectInput
                items={environments.data.map(env => ({
                  label: env.name,
                  value: env.id,
                }))}
                onSelect={({ value }) => {
                  onSelectEnv(value as string);
                }}
              />
            </Box>
          )}
        </>
      )}
    </Box>
  );
};
