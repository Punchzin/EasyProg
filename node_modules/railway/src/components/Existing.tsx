import { Box, Text } from "ink";
import SelectInput from "ink-select-input";
import TextInput from "ink-text-input";
import React, { useEffect, useMemo, useState } from "react";
import { getProject, getUser } from "../api";
import { createConfig, getGlobalConfig } from "../config";
import { useAsyncAction } from "../hooks/useAsyncAction";
import { useExitDelay } from "../hooks/useExitDelay";
import { Project, Environment } from "../types";
import { Spinner } from "./Spinner";

const ProjectConnected: React.FC<{
  project: Project;
  environment: Environment | null;
}> = ({ project, environment }) => (
  <Box flexDirection="column" paddingX={1}>
    <Text>Created .railway/config.json</Text>
    <Text>
      Connected to project <Text color="blue">{project.name}</Text>
    </Text>
    <Text>
      {environment != null ? (
        <>
          Using environment <Text color="blue">{environment.name}</Text>
        </>
      ) : (
        "Not using a environment"
      )}
    </Text>
  </Box>
);

const ConnectProjectId: React.FC<{
  projectId?: string;
  force?: boolean;
}> = ({ projectId, force }) => {
  const [isConnecting, setIsConnecting] = useState(projectId != null);
  const [text, setText] = useState(projectId ?? "");
  const [connectedProject, setConnectedProject] = useState<Project | null>(
    null,
  );
  const [usingEnv, setUsingEnv] = useState<Environment | null>(null);
  const [error, setError] = useState<string | null>(null);
  const exit = useExitDelay();

  const onConnectProject = async (projectId: string) => {
    try {
      setIsConnecting(true);
      const project = await getProject(projectId);
      const environment = project.environments[0];
      createConfig(project.id, environment?.id, force);
      setConnectedProject(project);
      setUsingEnv(environment);
    } catch (e) {
      setError(e.message);
    }

    setIsConnecting(false);
    exit();
  };

  useEffect(() => {
    if (projectId != null) {
      onConnectProject(projectId);
    }
  }, []);

  if (isConnecting) {
    return <Spinner />;
  }

  return (
    <Box flexDirection="column">
      {connectedProject != null ? (
        <ProjectConnected project={connectedProject} environment={usingEnv} />
      ) : error != null ? (
        <Text color="red">{error}</Text>
      ) : (
        <>
          <Box>
            <Box marginRight={1}>
              <Text>Enter your project id:</Text>
            </Box>

            <TextInput
              value={text}
              onChange={setText}
              onSubmit={() => {
                if (text.trim() === "") {
                  setError("Project id cannot be empty");
                } else {
                  onConnectProject(text);
                }
              }}
            />
          </Box>
        </>
      )}
    </Box>
  );
};

export const ConnectListProjects: React.FC<{
  force?: boolean;
}> = ({ force }) => {
  const [connectedProject, setConnectedProject] = useState<Project | null>(
    null,
  );
  const [usingEnv, setUsingEnv] = useState<Environment | null>(null);
  const exit = useExitDelay();

  const projects = useAsyncAction<Project[]>(
    async () => {
      const user = await getUser();
      return user.projects ?? [];
    },
    null,
    [],
  );

  useEffect(() => {
    if (projects.error != null || projects.data?.length === 0) {
      exit();
    }
  }, [projects.error, projects.data]);

  const onConnectProject = async (projectId: string) => {
    const project = await getProject(projectId);
    const environment = project.environments[0];
    createConfig(projectId, environment.id, force);
    setConnectedProject(project);
    setUsingEnv(environment);
    exit();
  };

  return (
    <Box flexDirection="column">
      {connectedProject != null ? (
        <ProjectConnected project={connectedProject} environment={usingEnv} />
      ) : (
        <>
          {projects.loading ? (
            <Spinner />
          ) : projects.error != null ? (
            <Text color="red">Error fetching projects</Text>
          ) : projects.data.length === 0 ? (
            <Box flexDirection="column">
              <Text>You have no projects</Text>
              <Text>
                Run <Text color="blue">railway new</Text> to create one
              </Text>
            </Box>
          ) : (
            <Box paddingX={1} flexDirection="column">
              <Text>Select Project</Text>

              <SelectInput
                items={projects.data.map(p => ({
                  label: p.name ?? "<unnamed>",
                  value: p.id,
                }))}
                onSelect={({ value }) => {
                  onConnectProject(value as string);
                }}
              />
            </Box>
          )}
        </>
      )}
    </Box>
  );
};

export const Existing: React.FC<{ projectId?: string; force?: boolean }> = ({
  projectId,
  force,
}) => {
  const isLoggedIn = useMemo(() => getGlobalConfig().token != null, []);

  return isLoggedIn && projectId == null ? (
    <ConnectListProjects force={force} />
  ) : (
    <ConnectProjectId projectId={projectId} force={force} />
  );
};
