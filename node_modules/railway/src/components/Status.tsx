import { Box, Text } from "ink";
import React from "react";
import { getProject, getUser } from "../api";
import { getConfig, getGlobalConfig } from "../config";
import { useAsyncAction } from "../hooks/useAsyncAction";
import { useExitDelay } from "../hooks/useExitDelay";
import { Project, User } from "../types";
import { Spinner } from "./Spinner";

export const Status: React.FC = () => {
  const exit = useExitDelay();

  const result = useAsyncAction<{
    user: User | null;
    projectName: string | null;
    plugins: string[] | null;
    environment: string | null;
  }>(
    async () => {
      const config = getConfig();
      const globalConfig = getGlobalConfig();

      let project: Project | null = null;
      if (config.project != null) {
        project = await getProject(config.project);
      }

      let environment: string | null = null;
      if (project != null && config.environment != null) {
        environment =
          project.environments.find(env => env.id === config.environment)
            ?.name ?? null;
      }

      let user: User | null = null;
      if (globalConfig.token != null) {
        user = await getUser();
      }

      return {
        user,
        projectName: project?.name ?? null,
        plugins: project?.plugins.map(p => p.name) ?? null,
        environment,
      };
    },
    exit,
    [],
  );

  return (
    <Box>
      {result.loading ? (
        <Box>
          <Spinner />
        </Box>
      ) : result.error != null ? (
        <Text>{result.error}</Text>
      ) : (
        <Box
          flexDirection="column"
          borderStyle="single"
          paddingX={1}
          minWidth={20}
        >
          <Box flexDirection="column" marginBottom={1}>
            {result.data.user == null ? (
              <Text dimColor>Not logged in</Text>
            ) : (
              <>
                <Text dimColor>Logged in as</Text>
                <Box paddingLeft={2}>
                  <Text>
                    {result.data.user.name ?? result.data.user.email}

                    {result.data.user.name != null && (
                      <> ({result.data.user.email})</>
                    )}
                  </Text>
                </Box>
              </>
            )}
          </Box>

          <Box flexDirection="column" marginBottom={1}>
            {result.data.projectName == null ? (
              <Text dimColor>Not connected to a project</Text>
            ) : (
              <>
                <Text dimColor>Connected to project</Text>
                <Box paddingLeft={2}>
                  <Text>{result.data.projectName}</Text>
                </Box>
              </>
            )}
          </Box>

          <Box flexDirection="column" marginBottom={1}>
            {result.data.environment == null ? (
              <Text dimColor>Not connected to an environment</Text>
            ) : (
              <>
                <Text dimColor>Using environment</Text>
                <Box paddingLeft={2}>
                  <Text>{result.data.environment}</Text>
                </Box>
              </>
            )}
          </Box>

          {result.data.plugins != null && result.data.plugins.length > 0 && (
            <>
              <Text dimColor>Plugins added</Text>
              <Box flexDirection="column" paddingLeft={2}>
                {result.data.plugins.map(name => (
                  <Text key={name}>{name}</Text>
                ))}
              </Box>
            </>
          )}
        </Box>
      )}
    </Box>
  );
};
